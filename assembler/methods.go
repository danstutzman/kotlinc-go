package assembler

import (
	"encoding/binary"
	"io"
)

const ACC_PUBLIC = 0x0001       //	Declared public; may be accessed from outside its package.
const ACC_PRIVATE = 0x0002      //	Declared private; accessible only within the defining class.
const ACC_PROTECTED = 0x0004    //	Declared protected; may be accessed within subclasses.
const ACC_STATIC = 0x0008       //	Declared static.
const ACC_FINAL = 0x0010        //	Declared final; must not be overridden (ยง5.4.5).
const ACC_SYNCHRONIZED = 0x0020 //	Declared synchronized; invocation is wrapped by a monitor use.
const ACC_BRIDGE = 0x0040       //	A bridge method, generated by the compiler.
const ACC_VARARGS = 0x0080      //	Declared with variable number of arguments.
const ACC_NATIVE = 0x0100       //	Declared native; implemented in a language other than Java.
const ACC_ABSTRACT = 0x0400     //	Declared abstract; no implementation is provided.
const ACC_STRICT = 0x0800       //	Declared strictfp; floating-point mode is FP-strict.
const ACC_SYNTHETIC = 0x1000    //	Declared synthetic; not present in the source code.

type Method struct {
	access_flags     uint16
	name_index       PoolIndex
	descriptor_index PoolIndex
	attributes       []Attribute
}

func (self *Method) Write(out io.Writer) {
	binary.Write(out, binary.BigEndian, self.access_flags)
	binary.Write(out, binary.BigEndian, self.name_index)
	binary.Write(out, binary.BigEndian, self.descriptor_index)

	numAttributes := uint16(len(self.attributes))
	binary.Write(out, binary.BigEndian, numAttributes)
	for _, attribute := range self.attributes {
		attribute.Write(out)
	}
}
