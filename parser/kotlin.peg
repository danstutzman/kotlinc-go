{
  package main

  //fun main(args: Array<String>) {
  //  println("Hello, world!")
  //}

  type Fun struct {
    name string
    args []Arg
    body []string
  }
  type Arg struct {
    name string
    type_ string
  }

  func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
  }
}

Input <- fun:Fun {
  return fun, nil
}

Fun <- "fun" _ name:Ident '(' _ funArgs:FunArgs? _ ')' _ funBody:FunBody {
  var args []Arg
  if funArgs == nil {
    args = []Arg{}
  } else {
    args = funArgs.([]Arg)
  }

  return Fun{
    name: name.(string),
    args: args,
    body: funBody.([]string),
  }, nil
}

FunArgs <- first:FunArg _ rest:( ',' _ FunArgs )? {
  args := []Arg{first.(Arg)}
  if rest != nil {
    args = append(args, rest.([]interface{})[2].([]Arg)...)
  }
  return args, nil
}

FunArg <- name:Ident _ ':' _ type_:Type {
  return Arg{
    name: name.(string),
    type_: type_.(string),
  }, nil
}

FunBody <- '{' _ statements:Statements? _ '}' {
  if statements == nil {
    return []string{}, nil
  } else {
    return statements.([]string), nil
  }
}

Statements <- statement:Statement _ statements:(';' _ statements:Statements)? {
  out := []string{ statement.(string) }
  if statements != nil {
    out = append(out, statements.([]interface{})[2].([]string)...)
  }
  return out, nil
}

Statement <- "println()" {
  return "println()", nil
}

Type <- [a-zA-Z0-9<>]+ {
  return string(c.text), nil
}

Ident <- [a-zA-Z0-9]+ {
  return string(c.text), nil
}

Integer <- '-'? [0-9]+ {
  return strconv.Atoi(string(c.text))
}

_ "whitespace" <- [ \n\t\r]*

EOF <- !.
